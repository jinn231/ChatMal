// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CHAT_ROOM_STATUS {
  REQUEST
  NORMAL
}

enum CHAT_ROOM_TYPES {
  GROUP_CHAT
  NORMAL_CHAT
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  role         UserRole       @default(USER)
  lastLoginIp  String?
  passwordHash String
  SessionToken SessionToken[]
  lastActiveAt DateTime?

  conversationIds String[]       @db.ObjectId
  Conversation    Conversation[] @relation(fields: [conversationIds], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followers String[]
  following String[]

  Messages   Messages[]
  messagesId String?    @db.ObjectId

  DeleteForUserIds DeleteForUserIds[]

  seenMessageIds String[]   @db.ObjectId
  seenMessages   Messages[] @relation("Seen", fields: [seenMessageIds], references: [id])
}

model SessionToken {
  token      String    @id @map("_id")
  userId     String?   @db.ObjectId
  User       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  experiedAt DateTime?
}

model Conversation {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  type          CHAT_ROOM_TYPES
  status        CHAT_ROOM_STATUS
  userIds       String[]         @db.ObjectId
  users         User[]           @relation(fields: [userIds], references: [id])
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  lastMessageAt DateTime?        @default(now())
  Messages      Messages[]
}

model Messages {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String             @db.ObjectId
  conversation   Conversation       @relation(fields: [conversationId], references: [id])
  message        String
  seenIds        String[]           @db.ObjectId()
  seen           User[]             @relation("Seen", fields: [seenIds], references: [id])
  senderId       String             @db.ObjectId
  sender         User               @relation(fields: [senderId], references: [id])
  deleteFor      DeleteForUserIds[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model DeleteForUserIds {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  messagesId String?   @db.ObjectId
  Messages   Messages? @relation(fields: [messagesId], references: [id])
}
